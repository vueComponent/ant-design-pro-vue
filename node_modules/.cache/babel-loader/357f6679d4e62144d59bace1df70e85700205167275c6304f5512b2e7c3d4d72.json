{"ast":null,"code":"import _objectSpread from \"/home/cg/public/h1emu-boot-vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { registerShape } from 'viser-vue';\nvar DataSet = require('@antv/data-set');\nvar imgUrl = 'https://gw.alipayobjects.com/zos/rmsportal/gWyeGLCdFFRavBGIDzWk.png';\nvar scale = [{\n  dataKey: 'x',\n  nice: false\n}, {\n  dataKey: 'y',\n  nice: false\n}];\nregisterShape('point', 'cloud', {\n  draw: function draw(cfg, container) {\n    return container.addShape('text', {\n      attrs: _objectSpread(_objectSpread({\n        fillOpacity: cfg.opacity,\n        fontSize: cfg.origin._origin.size,\n        rotate: cfg.origin._origin.rotate,\n        text: cfg.origin._origin.text,\n        textAlign: 'center',\n        fontFamily: cfg.origin._origin.font,\n        fill: cfg.color,\n        textBaseline: 'Alphabetic'\n      }, cfg.style), {}, {\n        x: cfg.x,\n        y: cfg.y\n      })\n    });\n  }\n});\nexport default {\n  name: 'TagCloud',\n  props: {\n    tagList: {\n      type: Array,\n      required: true\n    },\n    height: {\n      type: Number,\n      default: 400\n    },\n    width: {\n      type: Number,\n      default: 640\n    }\n  },\n  data: function data() {\n    return {\n      data: [],\n      scale: scale\n    };\n  },\n  watch: {\n    tagList: function tagList(val) {\n      if (val.length > 0) {\n        this.initTagCloud(val);\n      }\n    }\n  },\n  mounted: function mounted() {\n    if (this.tagList.length > 0) {\n      this.initTagCloud(this.tagList);\n    }\n  },\n  methods: {\n    initTagCloud: function initTagCloud(dataSource) {\n      var _this = this;\n      var height = this.height,\n        width = this.width;\n      var dv = new DataSet.View().source(dataSource);\n      var range = dv.range('value');\n      var min = range[0];\n      var max = range[1];\n      var imageMask = new Image();\n      imageMask.crossOrigin = '';\n      imageMask.src = imgUrl;\n      imageMask.onload = function () {\n        dv.transform({\n          type: 'tag-cloud',\n          fields: ['name', 'value'],\n          size: [width, height],\n          imageMask: imageMask,\n          font: 'Verdana',\n          padding: 0,\n          timeInterval: 5000,\n          // max execute time\n          rotate: function rotate() {\n            var random = ~~(Math.random() * 4) % 4;\n            if (random === 2) {\n              random = 0;\n            }\n            return random * 90; // 0, 90, 270\n          },\n          fontSize: function fontSize(d) {\n            if (d.value) {\n              return (d.value - min) / (max - min) * (32 - 8) + 8;\n            }\n            return 0;\n          }\n        });\n        _this.data = dv.rows;\n      };\n    }\n  }\n};","map":{"version":3,"mappings":";;AASA;AACA;AAEA;AAEA,aACA;EAAAA;EAAAC;AAAA,GACA;EAAAD;EAAAC;AAAA,EACA;AAEAC;EACAC;IACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MAAA,GACAC;QACAC;QACAC;MAAA;IAEA;EACA;AACA;AAEA;EACAC;EACAC;IACAC;MACAC;MACAC;IACA;IACAC;MACAF;MACAG;IACA;IACAC;MACAJ;MACAG;IACA;EACA;EACAE;IACA;MACAA;MACAC;IACA;EACA;EACAC;IACAR;MACA;QACA;MACA;IACA;EACA;EACAS;IACA;MACA;IACA;EACA;EACAC;IACAC;MAAA;MACA;QAAAN;MAEA;MACA;MACA;MACA;MACA;MACAO;MACAA;MACAA;QACAC;UACAZ;UACAa;UACAC;UACAH;UACAI;UACAC;UACAC;UAAA;UACA7B;YACA;YACA;cACA8B;YACA;YACA;UACA;UACA/B;YACA;cACA;YACA;YACA;UACA;QACA;QACA;MACA;IACA;EACA;AACA","names":["dataKey","nice","registerShape","draw","attrs","fillOpacity","fontSize","rotate","text","textAlign","fontFamily","fill","textBaseline","cfg","x","y","name","props","tagList","type","required","height","default","width","data","scale","watch","mounted","methods","initTagCloud","imageMask","dv","fields","size","font","padding","timeInterval","random"],"sourceRoot":"src/components/Charts","sources":["TagCloud.vue"],"sourcesContent":["<template>\n  <v-chart :width=\"width\" :height=\"height\" :padding=\"[0]\" :data=\"data\" :scale=\"scale\">\n    <v-tooltip :show-title=\"false\" />\n    <v-coord type=\"rect\" direction=\"TL\" />\n    <v-point position=\"x*y\" color=\"category\" shape=\"cloud\" tooltip=\"value*category\" />\n  </v-chart>\n</template>\n\n<script>\nimport { registerShape } from 'viser-vue'\nconst DataSet = require('@antv/data-set')\n\nconst imgUrl = 'https://gw.alipayobjects.com/zos/rmsportal/gWyeGLCdFFRavBGIDzWk.png'\n\nconst scale = [\n  { dataKey: 'x', nice: false },\n  { dataKey: 'y', nice: false }\n]\n\nregisterShape('point', 'cloud', {\n  draw (cfg, container) {\n    return container.addShape('text', {\n      attrs: {\n        fillOpacity: cfg.opacity,\n        fontSize: cfg.origin._origin.size,\n        rotate: cfg.origin._origin.rotate,\n        text: cfg.origin._origin.text,\n        textAlign: 'center',\n        fontFamily: cfg.origin._origin.font,\n        fill: cfg.color,\n        textBaseline: 'Alphabetic',\n        ...cfg.style,\n        x: cfg.x,\n        y: cfg.y\n      }\n    })\n  }\n})\n\nexport default {\n  name: 'TagCloud',\n  props: {\n    tagList: {\n      type: Array,\n      required: true\n    },\n    height: {\n      type: Number,\n      default: 400\n    },\n    width: {\n      type: Number,\n      default: 640\n    }\n  },\n  data () {\n    return {\n      data: [],\n      scale\n    }\n  },\n  watch: {\n    tagList: function (val) {\n      if (val.length > 0) {\n        this.initTagCloud(val)\n      }\n    }\n  },\n  mounted () {\n    if (this.tagList.length > 0) {\n      this.initTagCloud(this.tagList)\n    }\n  },\n  methods: {\n    initTagCloud (dataSource) {\n      const { height, width } = this\n\n      const dv = new DataSet.View().source(dataSource)\n      const range = dv.range('value')\n      const min = range[0]\n      const max = range[1]\n      const imageMask = new Image()\n      imageMask.crossOrigin = ''\n      imageMask.src = imgUrl\n      imageMask.onload = () => {\n        dv.transform({\n          type: 'tag-cloud',\n          fields: ['name', 'value'],\n          size: [width, height],\n          imageMask,\n          font: 'Verdana',\n          padding: 0,\n          timeInterval: 5000, // max execute time\n          rotate () {\n            let random = ~~(Math.random() * 4) % 4\n            if (random === 2) {\n              random = 0\n            }\n            return random * 90 // 0, 90, 270\n          },\n          fontSize (d) {\n            if (d.value) {\n              return ((d.value - min) / (max - min)) * (32 - 8) + 8\n            }\n            return 0\n          }\n        })\n        this.data = dv.rows\n      }\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}