{"ast":null,"code":"import _objectSpread from \"/home/cg/public/h1emu-boot-vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport { getSmsCaptcha } from '@/api/login';\nimport { deviceMixin } from '@/store/device-mixin';\nimport { scorePassword } from '@/utils/util';\nvar levelNames = {\n  0: 'user.password.strength.short',\n  1: 'user.password.strength.low',\n  2: 'user.password.strength.medium',\n  3: 'user.password.strength.strong'\n};\nvar levelClass = {\n  0: 'error',\n  1: 'error',\n  2: 'warning',\n  3: 'success'\n};\nvar levelColor = {\n  0: '#ff0000',\n  1: '#ff0000',\n  2: '#ff7e05',\n  3: '#52c41a'\n};\nexport default {\n  name: 'Register',\n  components: {},\n  mixins: [deviceMixin],\n  data: function data() {\n    return {\n      form: this.$form.createForm(this),\n      state: {\n        time: 60,\n        level: 0,\n        smsSendBtn: false,\n        passwordLevel: 0,\n        passwordLevelChecked: false,\n        percent: 10,\n        progressColor: '#FF0000'\n      },\n      registerBtn: false\n    };\n  },\n  computed: {\n    passwordLevelClass: function passwordLevelClass() {\n      return levelClass[this.state.passwordLevel];\n    },\n    passwordLevelName: function passwordLevelName() {\n      return levelNames[this.state.passwordLevel];\n    },\n    passwordLevelColor: function passwordLevelColor() {\n      return levelColor[this.state.passwordLevel];\n    }\n  },\n  methods: {\n    handlePasswordLevel: function handlePasswordLevel(rule, value, callback) {\n      if (!value) {\n        return callback();\n      }\n      console.log('scorePassword ; ', scorePassword(value));\n      if (value.length >= 6) {\n        if (scorePassword(value) >= 30) {\n          this.state.level = 1;\n        }\n        if (scorePassword(value) >= 60) {\n          this.state.level = 2;\n        }\n        if (scorePassword(value) >= 80) {\n          this.state.level = 3;\n        }\n      } else {\n        this.state.level = 0;\n        callback(new Error(this.$t('user.password.strength.msg')));\n      }\n      this.state.passwordLevel = this.state.level;\n      this.state.percent = this.state.level * 33;\n      callback();\n    },\n    handlePasswordCheck: function handlePasswordCheck(rule, value, callback) {\n      var password = this.form.getFieldValue('password');\n      // console.log('value', value)\n      if (value === undefined) {\n        callback(new Error(this.$t('user.password.required')));\n      }\n      if (value && password && value.trim() !== password.trim()) {\n        callback(new Error(this.$t('user.password.twice.msg')));\n      }\n      callback();\n    },\n    handlePhoneCheck: function handlePhoneCheck(rule, value, callback) {\n      console.log('handlePhoneCheck, rule:', rule);\n      console.log('handlePhoneCheck, value', value);\n      console.log('handlePhoneCheck, callback', callback);\n      callback();\n    },\n    handlePasswordInputClick: function handlePasswordInputClick() {\n      if (!this.isMobile) {\n        this.state.passwordLevelChecked = true;\n        return;\n      }\n      this.state.passwordLevelChecked = false;\n    },\n    handleSubmit: function handleSubmit() {\n      var validateFields = this.form.validateFields,\n        state = this.state,\n        $router = this.$router;\n      validateFields({\n        force: true\n      }, function (err, values) {\n        if (!err) {\n          state.passwordLevelChecked = false;\n          $router.push({\n            name: 'registerResult',\n            params: _objectSpread({}, values)\n          });\n        }\n      });\n    },\n    getCaptcha: function getCaptcha(e) {\n      var _this = this;\n      e.preventDefault();\n      var validateFields = this.form.validateFields,\n        state = this.state,\n        $message = this.$message,\n        $notification = this.$notification;\n      validateFields(['mobile'], {\n        force: true\n      }, function (err, values) {\n        if (!err) {\n          state.smsSendBtn = true;\n          var interval = window.setInterval(function () {\n            if (state.time-- <= 0) {\n              state.time = 60;\n              state.smsSendBtn = false;\n              window.clearInterval(interval);\n            }\n          }, 1000);\n          var hide = $message.loading('验证码发送中..', 0);\n          getSmsCaptcha({\n            mobile: values.mobile\n          }).then(function (res) {\n            setTimeout(hide, 2500);\n            $notification['success']({\n              message: '提示',\n              description: '验证码获取成功，您的验证码为：' + res.result.captcha,\n              duration: 8\n            });\n          }).catch(function (err) {\n            setTimeout(hide, 1);\n            clearInterval(interval);\n            state.time = 60;\n            state.smsSendBtn = false;\n            _this.requestFailed(err);\n          });\n        }\n      });\n    },\n    requestFailed: function requestFailed(err) {\n      this.$notification['error']({\n        message: '错误',\n        description: ((err.response || {}).data || {}).message || '请求出现错误，请稍后再试',\n        duration: 4\n      });\n      this.registerBtn = false;\n    }\n  },\n  watch: {\n    'state.passwordLevel': function statePasswordLevel(val) {\n      console.log(val);\n    }\n  }\n};","map":{"version":3,"mappings":";;AAkGA;AACA;AACA;AAEA;EACA;EACA;EACA;EACA;AACA;AACA;EACA;EACA;EACA;EACA;AACA;AACA;EACA;EACA;EACA;EACA;AACA;AACA;EACAA;EACAC,aACA;EACAC;EACAC;IACA;MACAC;MAEAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;IACA;EACA;EACAC;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;EACAC;IACAC;MACA;QACA;MACA;MACAC;MACA;QACA;UACA;QACA;QACA;UACA;QACA;QACA;UACA;QACA;MACA;QACA;QACAC;MACA;MACA;MACA;MAEAA;IACA;IAEAC;MACA;MACA;MACA;QACAD;MACA;MACA;QACAA;MACA;MACAA;IACA;IAEAE;MACAH;MACAA;MACAA;MAEAC;IACA;IAEAG;MACA;QACA;QACA;MACA;MACA;IACA;IAEAC;MACA;QAAApB;QAAAqB;MACAC;QAAAC;MAAA;QACA;UACAvB;UACAqB;YAAA1B;YAAA6B;UAAA;QACA;MACA;IACA;IAEAC;MAAA;MACAC;MACA;QAAA1B;QAAA2B;QAAAC;MAEAN;QAAAC;MAAA,GACA;QACA;UACAvB;UAEA;YACA;cACAA;cACAA;cACA6B;YACA;UACA;UAEA;UAEAC;YAAAC;UAAA;YACAC;YACAJ;cACAK;cACAC;cACAC;YACA;UACA;YACAH;YACAI;YACApC;YACAA;YACA;UACA;QACA;MACA,EACA;IACA;IACAqC;MACA;QACAJ;QACAC;QACAC;MACA;MACA;IACA;EACA;EACAG;IACA;MACAvB;IACA;EACA;AACA","names":["name","components","mixins","data","form","state","time","level","smsSendBtn","passwordLevel","passwordLevelChecked","percent","progressColor","registerBtn","computed","passwordLevelClass","passwordLevelName","passwordLevelColor","methods","handlePasswordLevel","console","callback","handlePasswordCheck","handlePhoneCheck","handlePasswordInputClick","handleSubmit","$router","validateFields","force","params","getCaptcha","e","$message","$notification","window","getSmsCaptcha","mobile","setTimeout","message","description","duration","clearInterval","requestFailed","watch"],"sourceRoot":"src/views/user","sources":["Register.vue"],"sourcesContent":["<template>\n  <div class=\"main user-layout-register\">\n    <h3><span>{{ $t('user.register.register') }}</span></h3>\n    <a-form ref=\"formRegister\" :form=\"form\" id=\"formRegister\">\n      <a-form-item>\n        <a-input\n          size=\"large\"\n          type=\"text\"\n          :placeholder=\"$t('user.register.email.placeholder')\"\n          v-decorator=\"['email', {rules: [{ required: true, type: 'email', message: $t('user.email.required') }], validateTrigger: ['change', 'blur']}]\"\n        ></a-input>\n      </a-form-item>\n\n      <a-popover\n        placement=\"rightTop\"\n        :trigger=\"['focus']\"\n        :getPopupContainer=\"(trigger) => trigger.parentElement\"\n        v-model=\"state.passwordLevelChecked\">\n        <template slot=\"content\">\n          <div :style=\"{ width: '240px' }\" >\n            <div :class=\"['user-register', passwordLevelClass]\">{{ $t(passwordLevelName) }}</div>\n            <a-progress :percent=\"state.percent\" :showInfo=\"false\" :strokeColor=\" passwordLevelColor \" />\n            <div style=\"margin-top: 10px;\">\n              <span>{{ $t('user.register.password.popover-message') }}\n              </span>\n            </div>\n          </div>\n        </template>\n        <a-form-item>\n          <a-input-password\n            size=\"large\"\n            @click=\"handlePasswordInputClick\"\n            :placeholder=\"$t('user.register.password.placeholder')\"\n            v-decorator=\"['password', {rules: [{ required: true, message: $t('user.password.required') }, { validator: this.handlePasswordLevel }], validateTrigger: ['change', 'blur']}]\"\n          ></a-input-password>\n        </a-form-item>\n      </a-popover>\n\n      <a-form-item>\n        <a-input-password\n          size=\"large\"\n          :placeholder=\"$t('user.register.confirm-password.placeholder')\"\n          v-decorator=\"['password2', {rules: [{ required: true, message: $t('user.password.required') }, { validator: this.handlePasswordCheck }], validateTrigger: ['change', 'blur']}]\"\n        ></a-input-password>\n      </a-form-item>\n\n      <a-form-item>\n        <a-input size=\"large\" :placeholder=\"$t('user.login.mobile.placeholder')\" v-decorator=\"['mobile', {rules: [{ required: true, message: $t('user.phone-number.required'), pattern: /^1[3456789]\\d{9}$/ }, { validator: this.handlePhoneCheck } ], validateTrigger: ['change', 'blur'] }]\">\n          <a-select slot=\"addonBefore\" size=\"large\" defaultValue=\"+86\">\n            <a-select-option value=\"+86\">+86</a-select-option>\n            <a-select-option value=\"+87\">+87</a-select-option>\n          </a-select>\n        </a-input>\n      </a-form-item>\n      <!--<a-input-group size=\"large\" compact>\n            <a-select style=\"width: 20%\" size=\"large\" defaultValue=\"+86\">\n              <a-select-option value=\"+86\">+86</a-select-option>\n              <a-select-option value=\"+87\">+87</a-select-option>\n            </a-select>\n            <a-input style=\"width: 80%\" size=\"large\" placeholder=\"11 位手机号\"></a-input>\n          </a-input-group>-->\n\n      <a-row :gutter=\"16\">\n        <a-col class=\"gutter-row\" :span=\"16\">\n          <a-form-item>\n            <a-input size=\"large\" type=\"text\" :placeholder=\"$t('user.login.mobile.verification-code.placeholder')\" v-decorator=\"['captcha', {rules: [{ required: true, message: '请输入验证码' }], validateTrigger: 'blur'}]\">\n              <a-icon slot=\"prefix\" type=\"mail\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n            </a-input>\n          </a-form-item>\n        </a-col>\n        <a-col class=\"gutter-row\" :span=\"8\">\n          <a-button\n            class=\"getCaptcha\"\n            size=\"large\"\n            :disabled=\"state.smsSendBtn\"\n            @click.stop.prevent=\"getCaptcha\"\n            v-text=\"!state.smsSendBtn && $t('user.register.get-verification-code')||(state.time+' s')\"></a-button>\n        </a-col>\n      </a-row>\n\n      <a-form-item>\n        <a-button\n          size=\"large\"\n          type=\"primary\"\n          htmlType=\"submit\"\n          class=\"register-button\"\n          :loading=\"registerBtn\"\n          @click.stop.prevent=\"handleSubmit\"\n          :disabled=\"registerBtn\">{{ $t('user.register.register') }}\n        </a-button>\n        <router-link class=\"login\" :to=\"{ name: 'login' }\">{{ $t('user.register.sign-in') }}</router-link>\n      </a-form-item>\n\n    </a-form>\n  </div>\n</template>\n\n<script>\nimport { getSmsCaptcha } from '@/api/login'\nimport { deviceMixin } from '@/store/device-mixin'\nimport { scorePassword } from '@/utils/util'\n\nconst levelNames = {\n  0: 'user.password.strength.short',\n  1: 'user.password.strength.low',\n  2: 'user.password.strength.medium',\n  3: 'user.password.strength.strong'\n}\nconst levelClass = {\n  0: 'error',\n  1: 'error',\n  2: 'warning',\n  3: 'success'\n}\nconst levelColor = {\n  0: '#ff0000',\n  1: '#ff0000',\n  2: '#ff7e05',\n  3: '#52c41a'\n}\nexport default {\n  name: 'Register',\n  components: {\n  },\n  mixins: [deviceMixin],\n  data () {\n    return {\n      form: this.$form.createForm(this),\n\n      state: {\n        time: 60,\n        level: 0,\n        smsSendBtn: false,\n        passwordLevel: 0,\n        passwordLevelChecked: false,\n        percent: 10,\n        progressColor: '#FF0000'\n      },\n      registerBtn: false\n    }\n  },\n  computed: {\n    passwordLevelClass () {\n      return levelClass[this.state.passwordLevel]\n    },\n    passwordLevelName () {\n      return levelNames[this.state.passwordLevel]\n    },\n    passwordLevelColor () {\n      return levelColor[this.state.passwordLevel]\n    }\n  },\n  methods: {\n    handlePasswordLevel (rule, value, callback) {\n      if (!value) {\n       return callback()\n      }\n      console.log('scorePassword ; ', scorePassword(value))\n      if (value.length >= 6) {\n        if (scorePassword(value) >= 30) {\n          this.state.level = 1\n        }\n        if (scorePassword(value) >= 60) {\n        this.state.level = 2\n        }\n        if (scorePassword(value) >= 80) {\n        this.state.level = 3\n        }\n      } else {\n        this.state.level = 0\n        callback(new Error(this.$t('user.password.strength.msg')))\n      }\n      this.state.passwordLevel = this.state.level\n      this.state.percent = this.state.level * 33\n\n      callback()\n    },\n\n    handlePasswordCheck (rule, value, callback) {\n      const password = this.form.getFieldValue('password')\n      // console.log('value', value)\n      if (value === undefined) {\n        callback(new Error(this.$t('user.password.required')))\n      }\n      if (value && password && value.trim() !== password.trim()) {\n        callback(new Error(this.$t('user.password.twice.msg')))\n      }\n      callback()\n    },\n\n    handlePhoneCheck (rule, value, callback) {\n      console.log('handlePhoneCheck, rule:', rule)\n      console.log('handlePhoneCheck, value', value)\n      console.log('handlePhoneCheck, callback', callback)\n\n      callback()\n    },\n\n    handlePasswordInputClick () {\n      if (!this.isMobile) {\n        this.state.passwordLevelChecked = true\n        return\n      }\n      this.state.passwordLevelChecked = false\n    },\n\n    handleSubmit () {\n      const { form: { validateFields }, state, $router } = this\n      validateFields({ force: true }, (err, values) => {\n        if (!err) {\n          state.passwordLevelChecked = false\n          $router.push({ name: 'registerResult', params: { ...values } })\n        }\n      })\n    },\n\n    getCaptcha (e) {\n      e.preventDefault()\n      const { form: { validateFields }, state, $message, $notification } = this\n\n      validateFields(['mobile'], { force: true },\n        (err, values) => {\n          if (!err) {\n            state.smsSendBtn = true\n\n            const interval = window.setInterval(() => {\n              if (state.time-- <= 0) {\n                state.time = 60\n                state.smsSendBtn = false\n                window.clearInterval(interval)\n              }\n            }, 1000)\n\n            const hide = $message.loading('验证码发送中..', 0)\n\n            getSmsCaptcha({ mobile: values.mobile }).then(res => {\n              setTimeout(hide, 2500)\n              $notification['success']({\n                message: '提示',\n                description: '验证码获取成功，您的验证码为：' + res.result.captcha,\n                duration: 8\n              })\n            }).catch(err => {\n              setTimeout(hide, 1)\n              clearInterval(interval)\n              state.time = 60\n              state.smsSendBtn = false\n              this.requestFailed(err)\n            })\n          }\n        }\n      )\n    },\n    requestFailed (err) {\n      this.$notification['error']({\n        message: '错误',\n        description: ((err.response || {}).data || {}).message || '请求出现错误，请稍后再试',\n        duration: 4\n      })\n      this.registerBtn = false\n    }\n  },\n  watch: {\n    'state.passwordLevel' (val) {\n      console.log(val)\n    }\n  }\n}\n</script>\n<style lang=\"less\">\n  .user-register {\n\n    &.error {\n      color: #ff0000;\n    }\n\n    &.warning {\n      color: #ff7e05;\n    }\n\n    &.success {\n      color: #52c41a;\n    }\n\n  }\n\n  .user-layout-register {\n    .ant-input-group-addon:first-child {\n      background-color: #fff;\n    }\n  }\n</style>\n<style lang=\"less\" scoped>\n  .user-layout-register {\n\n    & > h3 {\n      font-size: 16px;\n      margin-bottom: 20px;\n    }\n\n    .getCaptcha {\n      display: block;\n      width: 100%;\n      height: 40px;\n    }\n\n    .register-button {\n      width: 50%;\n    }\n\n    .login {\n      float: right;\n      line-height: 40px;\n    }\n  }\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}