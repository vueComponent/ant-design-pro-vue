{"ast":null,"code":"import _objectSpread from \"/home/cg/public/h1emu-boot-vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport router, { resetRouter } from './router';\nimport store from './store';\nimport storage from 'store';\nimport NProgress from 'nprogress'; // progress bar\nimport '@/components/NProgress/nprogress.less'; // progress bar custom style\nimport notification from 'ant-design-vue/es/notification';\nimport { setDocumentTitle, domTitle } from '@/utils/domUtil';\nimport { ACCESS_TOKEN } from '@/store/mutation-types';\nimport { i18nRender } from '@/locales';\nNProgress.configure({\n  showSpinner: false\n}); // NProgress Configuration\n\nvar allowList = ['login', 'register', 'registerResult']; // no redirect allowList\nvar loginRoutePath = '/user/login';\nvar defaultRoutePath = '/dashboard/workplace';\nrouter.beforeEach(function (to, from, next) {\n  NProgress.start(); // start progress bar\n  to.meta && typeof to.meta.title !== 'undefined' && setDocumentTitle(\"\".concat(i18nRender(to.meta.title), \" - \").concat(domTitle));\n  /* has token */\n  var token = storage.get(ACCESS_TOKEN);\n  if (token) {\n    if (to.path === loginRoutePath) {\n      next({\n        path: defaultRoutePath\n      });\n      NProgress.done();\n    } else {\n      // check login user.roles is null\n      if (store.getters.roles.length === 0) {\n        // request login userInfo\n        store.dispatch('GetInfo').then(function (res) {\n          console.log('res', res);\n          // 根据用户权限信息生成可访问的路由表\n          store.dispatch('GenerateRoutes', _objectSpread({\n            token: token\n          }, res)).then(function () {\n            // 动态添加可访问路由表\n            // VueRouter@3.5.0+ New API\n            resetRouter(); // 重置路由 防止退出重新登录或者 token 过期后页面未刷新，导致的路由重复添加\n            store.getters.addRouters.forEach(function (r) {\n              router.addRoute(r);\n            });\n            // 请求带有 redirect 重定向时，登录自动重定向到该地址\n            var redirect = decodeURIComponent(from.query.redirect || to.path);\n            if (to.path === redirect) {\n              // set the replace: true so the navigation will not leave a history record\n              next(_objectSpread(_objectSpread({}, to), {}, {\n                replace: true\n              }));\n            } else {\n              // 跳转到目的路由\n              next({\n                path: redirect\n              });\n            }\n          });\n        }).catch(function () {\n          notification.error({\n            message: '错误',\n            description: '请求用户信息失败，请重试'\n          });\n          // 失败时，获取用户信息失败时，调用登出，来清空历史保留信息\n          store.dispatch('Logout').then(function () {\n            next({\n              path: loginRoutePath,\n              query: {\n                redirect: to.fullPath\n              }\n            });\n          });\n        });\n      } else {\n        next();\n      }\n    }\n  } else {\n    if (allowList.includes(to.name)) {\n      // 在免登录名单，直接进入\n      next();\n    } else {\n      next({\n        path: loginRoutePath,\n        query: {\n          redirect: to.fullPath\n        }\n      });\n      NProgress.done(); // if current page is login will not trigger afterEach hook, so manually handle it\n    }\n  }\n});\n\nrouter.afterEach(function () {\n  NProgress.done(); // finish progress bar\n});","map":{"version":3,"names":["router","resetRouter","store","storage","NProgress","notification","setDocumentTitle","domTitle","ACCESS_TOKEN","i18nRender","configure","showSpinner","allowList","loginRoutePath","defaultRoutePath","beforeEach","to","from","next","start","meta","title","token","get","path","done","getters","roles","length","dispatch","then","res","console","log","addRouters","forEach","r","addRoute","redirect","decodeURIComponent","query","replace","catch","error","message","description","fullPath","includes","name","afterEach"],"sources":["/home/cg/public/h1emu-boot-vue/src/permission.js"],"sourcesContent":["import router, { resetRouter } from './router'\nimport store from './store'\nimport storage from 'store'\nimport NProgress from 'nprogress' // progress bar\nimport '@/components/NProgress/nprogress.less' // progress bar custom style\nimport notification from 'ant-design-vue/es/notification'\nimport { setDocumentTitle, domTitle } from '@/utils/domUtil'\nimport { ACCESS_TOKEN } from '@/store/mutation-types'\nimport { i18nRender } from '@/locales'\n\nNProgress.configure({ showSpinner: false }) // NProgress Configuration\n\nconst allowList = ['login', 'register', 'registerResult'] // no redirect allowList\nconst loginRoutePath = '/user/login'\nconst defaultRoutePath = '/dashboard/workplace'\n\nrouter.beforeEach((to, from, next) => {\n  NProgress.start() // start progress bar\n  to.meta && typeof to.meta.title !== 'undefined' && setDocumentTitle(`${i18nRender(to.meta.title)} - ${domTitle}`)\n  /* has token */\n  const token = storage.get(ACCESS_TOKEN)\n  if (token) {\n    if (to.path === loginRoutePath) {\n      next({ path: defaultRoutePath })\n      NProgress.done()\n    } else {\n      // check login user.roles is null\n      if (store.getters.roles.length === 0) {\n        // request login userInfo\n        store\n          .dispatch('GetInfo')\n          .then(res => {\n            console.log('res', res)\n            // 根据用户权限信息生成可访问的路由表\n            store.dispatch('GenerateRoutes', { token, ...res }).then(() => {\n              // 动态添加可访问路由表\n              // VueRouter@3.5.0+ New API\n              resetRouter() // 重置路由 防止退出重新登录或者 token 过期后页面未刷新，导致的路由重复添加\n              store.getters.addRouters.forEach(r => {\n                router.addRoute(r)\n              })\n              // 请求带有 redirect 重定向时，登录自动重定向到该地址\n              const redirect = decodeURIComponent(from.query.redirect || to.path)\n              if (to.path === redirect) {\n                // set the replace: true so the navigation will not leave a history record\n                next({ ...to, replace: true })\n              } else {\n                // 跳转到目的路由\n                next({ path: redirect })\n              }\n            })\n          })\n          .catch(() => {\n            notification.error({\n              message: '错误',\n              description: '请求用户信息失败，请重试'\n            })\n            // 失败时，获取用户信息失败时，调用登出，来清空历史保留信息\n            store.dispatch('Logout').then(() => {\n              next({ path: loginRoutePath, query: { redirect: to.fullPath } })\n            })\n          })\n      } else {\n        next()\n      }\n    }\n  } else {\n    if (allowList.includes(to.name)) {\n      // 在免登录名单，直接进入\n      next()\n    } else {\n      next({ path: loginRoutePath, query: { redirect: to.fullPath } })\n      NProgress.done() // if current page is login will not trigger afterEach hook, so manually handle it\n    }\n  }\n})\n\nrouter.afterEach(() => {\n  NProgress.done() // finish progress bar\n})\n"],"mappings":";;;;;;AAAA,OAAOA,MAAM,IAAIC,WAAW,QAAQ,UAAU;AAC9C,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,OAAO,MAAM,OAAO;AAC3B,OAAOC,SAAS,MAAM,WAAW,EAAC;AAClC,OAAO,uCAAuC,EAAC;AAC/C,OAAOC,YAAY,MAAM,gCAAgC;AACzD,SAASC,gBAAgB,EAAEC,QAAQ,QAAQ,iBAAiB;AAC5D,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,UAAU,QAAQ,WAAW;AAEtCL,SAAS,CAACM,SAAS,CAAC;EAAEC,WAAW,EAAE;AAAM,CAAC,CAAC,EAAC;;AAE5C,IAAMC,SAAS,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,gBAAgB,CAAC,EAAC;AAC1D,IAAMC,cAAc,GAAG,aAAa;AACpC,IAAMC,gBAAgB,GAAG,sBAAsB;AAE/Cd,MAAM,CAACe,UAAU,CAAC,UAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,EAAK;EACpCd,SAAS,CAACe,KAAK,EAAE,EAAC;EAClBH,EAAE,CAACI,IAAI,IAAI,OAAOJ,EAAE,CAACI,IAAI,CAACC,KAAK,KAAK,WAAW,IAAIf,gBAAgB,WAAIG,UAAU,CAACO,EAAE,CAACI,IAAI,CAACC,KAAK,CAAC,gBAAMd,QAAQ,EAAG;EACjH;EACA,IAAMe,KAAK,GAAGnB,OAAO,CAACoB,GAAG,CAACf,YAAY,CAAC;EACvC,IAAIc,KAAK,EAAE;IACT,IAAIN,EAAE,CAACQ,IAAI,KAAKX,cAAc,EAAE;MAC9BK,IAAI,CAAC;QAAEM,IAAI,EAAEV;MAAiB,CAAC,CAAC;MAChCV,SAAS,CAACqB,IAAI,EAAE;IAClB,CAAC,MAAM;MACL;MACA,IAAIvB,KAAK,CAACwB,OAAO,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;QACpC;QACA1B,KAAK,CACF2B,QAAQ,CAAC,SAAS,CAAC,CACnBC,IAAI,CAAC,UAAAC,GAAG,EAAI;UACXC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEF,GAAG,CAAC;UACvB;UACA7B,KAAK,CAAC2B,QAAQ,CAAC,gBAAgB;YAAIP,KAAK,EAALA;UAAK,GAAKS,GAAG,EAAG,CAACD,IAAI,CAAC,YAAM;YAC7D;YACA;YACA7B,WAAW,EAAE,EAAC;YACdC,KAAK,CAACwB,OAAO,CAACQ,UAAU,CAACC,OAAO,CAAC,UAAAC,CAAC,EAAI;cACpCpC,MAAM,CAACqC,QAAQ,CAACD,CAAC,CAAC;YACpB,CAAC,CAAC;YACF;YACA,IAAME,QAAQ,GAAGC,kBAAkB,CAACtB,IAAI,CAACuB,KAAK,CAACF,QAAQ,IAAItB,EAAE,CAACQ,IAAI,CAAC;YACnE,IAAIR,EAAE,CAACQ,IAAI,KAAKc,QAAQ,EAAE;cACxB;cACApB,IAAI,iCAAMF,EAAE;gBAAEyB,OAAO,EAAE;cAAI,GAAG;YAChC,CAAC,MAAM;cACL;cACAvB,IAAI,CAAC;gBAAEM,IAAI,EAAEc;cAAS,CAAC,CAAC;YAC1B;UACF,CAAC,CAAC;QACJ,CAAC,CAAC,CACDI,KAAK,CAAC,YAAM;UACXrC,YAAY,CAACsC,KAAK,CAAC;YACjBC,OAAO,EAAE,IAAI;YACbC,WAAW,EAAE;UACf,CAAC,CAAC;UACF;UACA3C,KAAK,CAAC2B,QAAQ,CAAC,QAAQ,CAAC,CAACC,IAAI,CAAC,YAAM;YAClCZ,IAAI,CAAC;cAAEM,IAAI,EAAEX,cAAc;cAAE2B,KAAK,EAAE;gBAAEF,QAAQ,EAAEtB,EAAE,CAAC8B;cAAS;YAAE,CAAC,CAAC;UAClE,CAAC,CAAC;QACJ,CAAC,CAAC;MACN,CAAC,MAAM;QACL5B,IAAI,EAAE;MACR;IACF;EACF,CAAC,MAAM;IACL,IAAIN,SAAS,CAACmC,QAAQ,CAAC/B,EAAE,CAACgC,IAAI,CAAC,EAAE;MAC/B;MACA9B,IAAI,EAAE;IACR,CAAC,MAAM;MACLA,IAAI,CAAC;QAAEM,IAAI,EAAEX,cAAc;QAAE2B,KAAK,EAAE;UAAEF,QAAQ,EAAEtB,EAAE,CAAC8B;QAAS;MAAE,CAAC,CAAC;MAChE1C,SAAS,CAACqB,IAAI,EAAE,EAAC;IACnB;EACF;AACF,CAAC,CAAC;;AAEFzB,MAAM,CAACiD,SAAS,CAAC,YAAM;EACrB7C,SAAS,CAACqB,IAAI,EAAE,EAAC;AACnB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}