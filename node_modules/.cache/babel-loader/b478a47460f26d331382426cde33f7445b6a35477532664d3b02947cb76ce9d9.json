{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport Tooltip from 'ant-design-vue/es/tooltip';\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/util';\n/*\n    const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n    const TooltipOverlayStyle = {\n      overflowWrap: 'break-word',\n      wordWrap: 'break-word',\n    };\n  */\n\nexport default {\n  name: 'Ellipsis',\n  components: {\n    Tooltip: Tooltip\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-ellipsis'\n    },\n    tooltip: {\n      type: Boolean\n    },\n    length: {\n      type: Number,\n      required: true\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    fullWidthRecognition: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    getStrDom: function getStrDom(str, fullLength) {\n      var h = this.$createElement;\n      return h(\"span\", [cutStrByFullLength(str, this.length) + (fullLength > this.length ? '...' : '')]);\n    },\n    getTooltip: function getTooltip(fullStr, fullLength) {\n      var h = this.$createElement;\n      return h(Tooltip, [h(\"template\", {\n        \"slot\": \"title\"\n      }, [fullStr]), this.getStrDom(fullStr, fullLength)]);\n    }\n  },\n  render: function render() {\n    var _this$$props = this.$props,\n      tooltip = _this$$props.tooltip,\n      length = _this$$props.length;\n    var str = this.$slots.default.map(function (vNode) {\n      return vNode.text;\n    }).join('');\n    var fullLength = getStrFullLength(str);\n    var strDom = tooltip && fullLength > length ? this.getTooltip(str, fullLength) : this.getStrDom(str, fullLength);\n    return strDom;\n  }\n};","map":{"version":3,"mappings":";;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;EACAA;EACAC;IACAC;EACA;EACAC;IACAC;MACAC;MACAC;IACA;IACAC;MACAF;IACA;IACAG;MACAH;MACAI;IACA;IACAC;MACAL;MACAC;IACA;IACAK;MACAN;MACAC;IACA;EACA;EACAM;IACAC;MAAA;MACA,kBACAC;IAEA;IACAC;MAAA;MACA;QAAA,QAEA;MAAA,eACA;IAGA;EACA;EACAC;IACA;MAAAT;MAAAC;IACA;MAAA;IAAA;IACA;IACA;IACA,OACAS;EAEA;AACA","names":["name","components","Tooltip","props","prefixCls","type","default","tooltip","length","required","lines","fullWidthRecognition","methods","getStrDom","cutStrByFullLength","getTooltip","render","strDom"],"sourceRoot":"src/components/Ellipsis","sources":["Ellipsis.vue"],"sourcesContent":["<script>\nimport Tooltip from 'ant-design-vue/es/tooltip'\nimport { cutStrByFullLength, getStrFullLength } from '@/components/_util/util'\n/*\n    const isSupportLineClamp = document.body.style.webkitLineClamp !== undefined;\n\n    const TooltipOverlayStyle = {\n      overflowWrap: 'break-word',\n      wordWrap: 'break-word',\n    };\n  */\n\nexport default {\n  name: 'Ellipsis',\n  components: {\n    Tooltip\n  },\n  props: {\n    prefixCls: {\n      type: String,\n      default: 'ant-pro-ellipsis'\n    },\n    tooltip: {\n      type: Boolean\n    },\n    length: {\n      type: Number,\n      required: true\n    },\n    lines: {\n      type: Number,\n      default: 1\n    },\n    fullWidthRecognition: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    getStrDom (str, fullLength) {\n      return (\n        <span>{ cutStrByFullLength(str, this.length) + (fullLength > this.length ? '...' : '') }</span>\n      )\n    },\n    getTooltip (fullStr, fullLength) {\n      return (\n        <Tooltip>\n          <template slot=\"title\">{ fullStr }</template>\n          { this.getStrDom(fullStr, fullLength) }\n        </Tooltip>\n      )\n    }\n  },\n  render () {\n    const { tooltip, length } = this.$props\n    const str = this.$slots.default.map(vNode => vNode.text).join('')\n    const fullLength = getStrFullLength(str)\n    const strDom = tooltip && fullLength > length ? this.getTooltip(str, fullLength) : this.getStrDom(str, fullLength)\n    return (\n      strDom\n    )\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}